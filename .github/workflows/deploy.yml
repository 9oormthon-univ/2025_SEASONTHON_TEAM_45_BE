name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Make gradlew executable
      run: chmod +x ./gradlew
    
    - name: Build without tests
      run: ./gradlew build -x test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Make gradlew executable
      run: chmod +x ./gradlew
    
    - name: Build JAR
      run: ./gradlew bootJar
    
    - name: Get current time
      uses: josStorer/get-current-time@v2
      id: current-time
      with:
        format: YYYY-MM-DD-HH-mm-ss
        utcOffset: "+09:00"
    
    - name: Copy deployment files to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        source: "Dockerfile,docker-compose.prod.yml,build/libs/*.jar"
        target: "/tmp/carefreepass/"
        strip_components: 0

    - name: Deploy with Docker
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 300s
        script: |
          # Docker ÏÑ§Ïπò ÌôïÏù∏
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker ubuntu
            newgrp docker
          fi
          
          # Docker Compose ÏÑ§Ïπò ÌôïÏù∏  
          if ! command -v docker-compose &> /dev/null; then
            echo "Installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # Î∞∞Ìè¨ ÎîîÎ†âÌÜ†Î¶¨Î°ú Ïù¥Îèô
          cd /tmp/carefreepass || exit 1
          
          # .env ÌååÏùº Î≥µÏÇ¨ (ÌïÑÏàò)
          if [ -f /opt/carefreepass/.env ]; then
            cp /opt/carefreepass/.env .
            echo "‚úÖ .env file copied"
          else
            echo "‚ùå .env file not found at /opt/carefreepass/.env"
            exit 1
          fi
          
          # Í∏∞Ï°¥ Ïª®ÌÖåÏù¥ÎÑà Ï§ëÏßÄ
          sudo docker-compose -f docker-compose.prod.yml down || true
          
          # Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Ïã§Ìñâ (sudo ÏÇ¨Ïö©)
          sudo docker-compose -f docker-compose.prod.yml up -d --build

    - name: Health Check
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 300s
        script: |
          echo "Waiting for Docker container to be ready..."
          
          # Ïª®ÌÖåÏù¥ÎÑà ÏÉÅÌÉú ÌôïÏù∏
          cd /tmp/carefreepass
          
          # ÏµúÎåÄ 120Ï¥à ÎåÄÍ∏∞ (2Î∂Ñ)
          for i in {1..24}; do
            if curl -f http://localhost:8080/api/v1/test/health > /dev/null 2>&1; then
              echo "‚úÖ Health check passed!"
              echo "üöÄ Docker deployment successful!"
              
              # Docker Ïª®ÌÖåÏù¥ÎÑà Ï†ïÎ≥¥ Ï∂úÎ†•
              echo "--- Deployment Info ---"
              echo "Time: $(date)"
              echo "Container status: $(sudo docker-compose -f docker-compose.prod.yml ps)"
              echo "Port 8080 status: $(netstat -tlnp 2>/dev/null | grep :8080 || echo 'Not found')"
              
              # Í∞ÑÎã®Ìïú API ÌÖåÏä§Ìä∏
              echo "--- API Test ---"
              curl -s http://localhost:8080/api/v1/test/health | head -100
              
              exit 0
            else
              echo "Health check attempt $i failed, waiting 5 seconds..."
              sleep 5
            fi
          done
          
          echo "‚ùå Health check failed after 2 minutes"
          echo "--- Container Status ---"
          sudo docker-compose -f docker-compose.prod.yml ps
          
          echo "--- Container Logs ---"
          sudo docker-compose -f docker-compose.prod.yml logs --tail=50
          
          exit 1